<?php
/**
* {{ classname }}
*
* {{ description }}
* 
* @author {{ author }}
**/

if (!defined('_PS_VERSION_'))
	exit;

class {{ classname }} extends Module
{
    public function __construct()
    {
        $this->name = '{{ classname|lower }}';
        $this->tab = '{{ tab }}';
        $this->need_instance = {% if need_instance == false %}0{% else %}1{% endif %};

        parent::__construct();

        $this->displayname = $this->l('{{ displayname|raw }}');
        $this->description = $this->l('{{ description }}');

        $this->version = '{{ version }}';
        $this->author = '{{ author }}';
    }

    /**
    * @return bool success
    **/
    public function install()
    {
        return parent::install() 
            {% spaceless %}
            {% if( install_uninstall_db is defined and install_uninstall_db == true) %}
            && $this->dbInstall()
            {% endif %}{% endspaceless %}
{% for hook in hooks %}
            && $this->registerHook('{{ hook.name }}')
{% endfor %};
 	}

    /**
    * @return bool success
    **/
    public function uninstall()
    {
        return parent::uninstall() 
            {% spaceless %}
            {% if( install_uninstall_db is defined and install_uninstall_db == true) %}
                && $this->dbUninstall()
            {% endif %}; 
            {% endspaceless %}
            
    }
{% if( has_config is defined and has_config == true) %}
    /**
    * Module admin page
    */
    public function getContent()
    {
        $return = $this->_process_form();
        $return .= $this->_display_admin();
        return $return;
    }
    
    /**
    * Process admin form
    *
    * @return string html form process result (errors or success message)
    */
    protected function _process_form()
    {
        $return = '';
        if (Tools::isSubmit('submit'.$this->name))
        {
           $errors = array();
           // filter submitted vars
           $my_var = strval(Tools::getValue('my-var'));
           
           // check values 
           if (!$my_var  || empty($my_var) || !Validate::isGenericName($my_var))
           {
               $errors[] = $this->displayError( $this->l('Invalid Configuration value') );
           }
           
           // handle errors / success
           if(empty($errors))
           {
               Configuration::updateValue(strtoupper($this->name).'_my-var', $my_var);
               
               $return .= $this->displayConfirmation($this->l('Settings updated'));
           }
           else
           {
                $return .= implode($errors);
           }
        }
        return $return;
    }
    
    /**
    * Admin form
    *
    * @return string html form content
    */
    protected function _display_admin()
    {
        // Get default Language
        $default_lang = (int)Configuration::get('PS_LANG_DEFAULT');
         
        // Init Fields form array
        $fields_form[0]['form'] = array(
            'legend' => array(
                'title' => $this->l('Settings'),
            ),
            'input' => array(
                // Add form inputs here
                // define default value below
                // example field :
                array(
                    'type' => 'text',
                    'label' => $this->l('Configuration var label (my-var)'),
                    'name' => 'my-var',
                    'size' => 20,
                    'required' => true
                ),
                // another
                // array(
                // ),
            ),
            'submit' => array(
                'title' => $this->l('Save'),
                'class' => 'button'
            )
        );
         
        $form = new HelperForm();
         
        // Module, token and currentIndex
        $form->module = $this;
        $form->name_controller = $this->name;
        $form->token = Tools::getAdminTokenLite('AdminModules');
        $form->currentIndex = AdminController::$currentIndex.'&configure='.$this->name;
         
        // Language
        $form->default_form_language = $default_lang;
        $form->allow_employee_form_lang = $default_lang;
         
        // Title and toolbar
        $form->title = $this->displayname;
        $form->show_toolbar = true;        // false -> remove toolbar
        $form->toolbar_scroll = true;      // yes - > Toolbar is always visible on the top of the screen.
        $form->submit_action = 'submit'.$this->name;
        $form->toolbar_btn = array(
            'save' =>
            array(
                'desc' => $this->l('Save'),
                'href' => AdminController::$currentIndex.'&configure='.$this->name.'&save'.$this->name.
                '&token='.Tools::getAdminTokenLite('AdminModules'),
            ),
            'back' => array(
                'href' => AdminController::$currentIndex.'&token='.Tools::getAdminTokenLite('AdminModules'),
                'desc' => $this->l('Back to list')
            )
        );
         
        // Load current value
        $form->fields_value['my-var'] = Configuration::get(strtoupper($this->name).'_my-var');
         
        return $form->generateForm($fields_form);
    }
{% endif %}

{% if( enable_disable is defined and enable_disable == true) %}
    /**
    * Enable/Activate module.
    *
    * @param bool $forceAll If true, enable module for all shop
    */
    public function enable($forceAll = false)
    {
        return parent::enable($forceAll);
    }

    /**
    * Disable/Deactivate module.
    *
    * @param bool $forceAll If true, disable module for all shop
    */
    public function disable($forceAll = false)
    {
        return parent::disable($forceAll);
    }
{% endif %}
    
{% for hook in hooks %}
    /**
    * hook{{ hook.name|ucfirst }}
    *
    * {{ hook.title|raw }}
    * {% if hook.description != hook.title%}{{ hook.description|raw }}
{% endif %}
    **/
    public function hook{{ hook.name|ucfirst }}($params)
    {

    }

{% endfor %}
{% if( install_uninstall_db is defined and install_uninstall_db == true) %}
    /**
    * Module tables installation
    * 
    * @return bool success
    **/
    protected function dbInstall()
    {
        return true;
    }

    /**
    * Module tables installation
    * 
    * @return bool success
    **/
    protected function dbUninstall()
    {
        return true;
    }
{% endif %}
    
}
